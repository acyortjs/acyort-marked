{
  "body": "原理就是将要排序的数组的每一个项作为 `setTimeout` 时间参数，然后就可以排序了\r\n\r\n排序时间跟数组最大值绝对值有关 :)\r\n\r\n需要对数组的负数项做一下处理，因为 `setTimeout` 参数负数的话跟参数 0 是一样的\r\n\r\n例子 [JSFiddle](https://jsfiddle.net/am0200/o0sz55pq/)\r\n\r\n具体代码说明:\r\n\r\n```js\r\n// 需要排序数组\r\nconst numbers = [8, 0, 3, -1, 9, -3, -767, 4, 111, 999, 89];\r\n\r\nasync function sortArr(arr) {\r\n  const left = arr.filter(a => a < 0).map(a => a * -1) // 获取数组负数项并转成正数\r\n  const right = arr.filter(a => a >= 0) // 数组正数项\r\n  const sortLeft = (await sort(left)).map(a => a * -1).reverse() // 负数项排序后需要反向\r\n  const sortRight = await sort(right) // 正数项排序\r\n  \r\n  return sortLeft.concat(sortRight)\r\n} \r\n\r\nfunction sort(arr) {\r\n  return new Promise((resolve) => {\r\n    let len = arr.length\r\n    const back = []\r\n    \r\n    arr.forEach(item => {\r\n      setTimeout(() => {\r\n        back.push(item)\r\n        len -= 1\r\n    \tif (len === 0) {\r\n          resolve(back) // 完成排序\r\n        }\r\n      }, item) // 以每个项作为时间\r\n    })\r\n  })\r\n}\r\n\r\n;(async () => {\r\n  document.body.innerHTML = 'Before: ' + numbers.join(', ') + '<br>After: ' + (await sortArr(numbers)).join(', ')\r\n})()\r\n\r\n// 排序结果: [-767, -3, -1, 0, 3, 4, 8, 9, 89, 111, 999]\r\n```\r\n\r\n最后说明一下，这只是一种特别的排序方式，请不要去纠结效率时间等其他问题"
}
